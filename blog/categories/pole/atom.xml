<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: pole | Alex Tucker]]></title>
  <link href="http://alextucker.github.com/blog/categories/pole/atom.xml" rel="self"/>
  <link href="http://alextucker.github.com/"/>
  <updated>2013-06-22T13:56:12-04:00</updated>
  <id>http://alextucker.github.com/</id>
  <author>
    <name><![CDATA[Alex Tucker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Django Social Auth and Dropbox Python SDK]]></title>
    <link href="http://alextucker.github.com/blog/2013/06/22/django-social-auth-and-dropbox-python-sdk/"/>
    <updated>2013-06-22T11:38:00-04:00</updated>
    <id>http://alextucker.github.com/blog/2013/06/22/django-social-auth-and-dropbox-python-sdk</id>
    <content type="html"><![CDATA[<p>I have been spending some free time on the weekends working on a new project that simplifies sharing files between freelancers or agencies and their clients called <a href="http://www.pole.io">Pole.io</a>. Obviously one of features that would be required is to Sign In with your Dropbox account.</p>

<p>Dropbox has an <a href="https://www.dropbox.com/developers">API</a> and supports OAuth v1 for authentication. Django has a fantastic library called <a href="https://github.com/omab/django-social-auth">Django Social Auth</a> which handles all of the nuances of communicating with different OAuth implementations and automatically hooks intos Django's User and Authentication systems.</p>

<p>Django Social Auth <a href="http://django-social-auth.readthedocs.org/en/latest/backends/dropbox.html">supports Dropbox</a> and Dropbox has an <a href="https://www.dropbox.com/developers/core/start/python">Official Python SDK</a> (which is just a nice wrapper on their REST API). I ran into a a little problem with how Django Social Auth stores the OAuth Credentials and getting them to work with the Dropbox Python SDK.</p>

<p>The Dropbox SDK expects you to construct the <code>DropboxClient</code> with a <code>DropboxSession</code>. Much of documentation shows examples of using the <code>DropboxSession</code> object to perform the actualy authentication, but since Django Social Auth takes care of that, we will need to set the Access Token and Secret on the <code>DropboxSession</code> ourselves.</p>

<p>The code below deomstrates how to get get the Access Token and Secret out of the Django Social Auth, set the Access Token and Secret on the <code>DropboxSession</code> and construct a new <code>DropboxClient</code> to access the Dropbox API:</p>

<p>```
from social_auth.models import UserSocialAuth
from dropbox import client, session</p>

<h1>Get Access Token and Secret</h1>

<p>social_user = UserSocialAuth.objects.get(user=request.user)
token = social_user.tokens['access_token'].split('&amp;')[0].split('=')[1]
secret = social_user.tokens['access_token'].split('&amp;')[1].split('=')[1]</p>

<h1>Set Access Token on Session</h1>

<p>sess = session.DropboxSession(settings.DROPBOX_APP_ID, settings.DROPBOX_API_SECRET, 'dropbox')
sess.set_token(secret, token)</p>

<p>dropbox_client = client.DropboxClient(sess)</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
